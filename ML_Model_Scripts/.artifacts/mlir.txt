module {
  func.func @main(%arg0: tensor<1x20x!FHE.eint<16>>) -> tensor<1x4x!FHE.esint<16>> {
    %cst = arith.constant dense<[[-12, 46, 71, -37], [0, 21, 18, 28], [3, -40, 110, -5], [-76, -5, 22, 127], [11, 41, 12, 4], [15, -45, 47, 51], [37, 13, 12, 6], [14, 104, 77, -128], [-4, 14, 23, 35], [18, 26, 11, 13], [48, 37, -73, 57], [13, 12, 26, 16], [3, 19, 11, 35], [17, 15, 10, 27], [55, -77, 54, 36], [7, 22, 15, 24], [10, 5, 33, 19], [16, 30, 2, 19], [9, 28, 2, 30], [-2, 15, 21, 34]]> : tensor<20x4xi17>
    %0 = "FHELinalg.matmul_eint_int"(%arg0, %cst) : (tensor<1x20x!FHE.eint<16>>, tensor<20x4xi17>) -> tensor<1x4x!FHE.eint<16>>
    %1 = "FHELinalg.sum"(%arg0) {axes = [1], keep_dims = true} : (tensor<1x20x!FHE.eint<16>>) -> tensor<1x1x!FHE.eint<16>>
    %c17_i17 = arith.constant 17 : i17
    %cst_0 = tensor.from_elements %c17_i17 : tensor<1xi17>
    %2 = "FHELinalg.mul_eint_int"(%1, %cst_0) : (tensor<1x1x!FHE.eint<16>>, tensor<1xi17>) -> tensor<1x1x!FHE.eint<16>>
    %3 = "FHELinalg.to_signed"(%0) : (tensor<1x4x!FHE.eint<16>>) -> tensor<1x4x!FHE.esint<16>>
    %4 = "FHELinalg.to_signed"(%2) : (tensor<1x1x!FHE.eint<16>>) -> tensor<1x1x!FHE.esint<16>>
    %5 = "FHELinalg.sub_eint"(%3, %4) : (tensor<1x4x!FHE.esint<16>>, tensor<1x1x!FHE.esint<16>>) -> tensor<1x4x!FHE.esint<16>>
    %cst_1 = arith.constant dense<[[-5743, 3762, -63, 2010]]> : tensor<1x4xi17>
    %6 = "FHELinalg.add_eint_int"(%5, %cst_1) : (tensor<1x4x!FHE.esint<16>>, tensor<1x4xi17>) -> tensor<1x4x!FHE.esint<16>>
    return %6 : tensor<1x4x!FHE.esint<16>>
  }
}
